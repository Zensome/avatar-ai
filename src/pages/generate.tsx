import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { Button } from "~/component/Button";
import { FormGroup } from "~/component/FormGroup";
import { Input } from "~/component/Input";
import { api } from "~/utils/api";

const colors = [
  "blue",
  "red",
  "pink",
  "green",
  "orange",
  "yellow",
  "white",
  "black",
];
const shapes = ["square", "circle", "rounded"];
const styles = [
  "claymorphic",
  "3d rendered",
  "pixelated",
  "illustrated with color pencil",
];

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({
    prompt: "",
    color: "",
    shape: "",
    style: "",
    numberOfIcons: "1",
  });
  const [error, setError] = useState("");
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string }[]>([]);

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      setImagesUrl(data);
    },
    onError(error) {
      setError(error.message);
    },
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    generateIcon.mutate({
      ...form,
      numberOfIcons: parseInt(form.numberOfIcons),
    });
  }

  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({ ...prev, [key]: e.target.value }));
    };
  }

  return (
    <>
      <Head>
        <title>Generate Icons</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mb-4 mt-24 flex min-h-screen flex-col gap-4 px-8">
        <h1 className="text-3xl font-bold">Generate your icons</h1>
        <p className="mb-12 text-2xl">
          Fill out the form below to start generating your icons.
        </p>
        <form className="flex flex-col gap-4" onSubmit={handleFormSubmit}>
          <FormGroup className="mb-6">
            <label className="text-lg font-semibold">Prompt</label>
            <Input
              required
              value={form.prompt}
              onChange={updateForm("prompt")}
            ></Input>
          </FormGroup>
          <FormGroup className="mb-6">
            <label className="text-lg font-semibold">Color</label>
            <div className="flex gap-2">
              {colors.map((color) => (
                <label key={color} className="flex items-center gap-1">
                  <Input
                    type="radio"
                    name="color"
                    checked={color === form.color}
                    onChange={() => setForm((prev) => ({ ...prev, color }))}
                  ></Input>
                  {color}
                </label>
              ))}
            </div>
          </FormGroup>
          <FormGroup className="mb-6">
            <label className="text-lg font-semibold">Shape</label>
            <div className="flex gap-2">
              {shapes.map((shape) => (
                <label key={shape} className="flex items-center gap-1">
                  <Input
                    type="radio"
                    name="shape"
                    checked={shape === form.shape}
                    onChange={() => setForm((prev) => ({ ...prev, shape }))}
                  ></Input>
                  {shape}
                </label>
              ))}
            </div>
          </FormGroup>
          <FormGroup className="mb-6">
            <label className="text-lg font-semibold">Style</label>
            <div className="flex gap-2">
              {styles.map((style) => (
                <label key={style} className="flex items-center gap-1">
                  <Input
                    type="radio"
                    name="style"
                    checked={style === form.style}
                    onChange={() => setForm((prev) => ({ ...prev, style }))}
                  ></Input>
                  {style}
                </label>
              ))}
            </div>
          </FormGroup>
          <FormGroup className="mb-6">
            <label className="text-lg font-semibold">Number of Icons</label>
            <Input
              type="number"
              value={form.numberOfIcons}
              required
              onChange={updateForm("numberOfIcons")}
            ></Input>
          </FormGroup>
          {error && (
            <div className="rounded bg-red-500 p-4 text-lg text-white">
              {error}
            </div>
          )}
          <Button
            isLoading={generateIcon.isLoading}
            disabled={generateIcon.isLoading}
          >
            Submit
          </Button>
        </form>
        {imagesUrl.length > 0 && (
          <section className="mt-8">
            <h2 className="text-xl font-semibold">Your Icons</h2>
            <div className="grid grid-cols-4 gap-4">
              {imagesUrl.map(({ imageUrl }) => (
                <Image
                  key={imageUrl}
                  src={imageUrl}
                  alt="Generated icon"
                  width="512"
                  height="512"
                  className="w-full"
                />
              ))}
            </div>
          </section>
        )}
      </main>
    </>
  );
};

export default GeneratePage;
